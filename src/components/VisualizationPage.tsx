import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { ArrowLeft, BarChart3, Loader2, AlertCircle, RotateCcw } from 'lucide-react';

interface VisualizationPageProps {
  cacheVisualization?: (messageId: string, htmlContent: string) => void;
}

const VisualizationPage: React.FC<VisualizationPageProps> = ({ cacheVisualization }) => {
  const navigate = useNavigate();
  const location = useLocation();
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [visualizationHtml, setVisualizationHtml] = useState<string>('');

  const { messageContent, visualizationType, cachedVisualization, messageId } = location.state || {};

  const generateVisualizationWithGemini = async (content: string): Promise<string> => {
    const apiKey = import.meta.env.VITE_GEMINI_API_KEY;
    
    console.log('üîß Gemini API Debug:', {
      hasApiKey: !!apiKey,
      apiKeyLength: apiKey?.length || 0,
      apiKeyStart: apiKey?.substring(0, 10) || 'N/A',
      contentLength: content.length,
      visualizationType: visualizationType || 'quick'
    });

    if (!apiKey) {
      throw new Error('Gemini API key not found');
    }

    const prompt = `Create an interactive HTML data visualization based on this content: "${content}". 

Requirements:
- Use Chart.js library from CDN
- Include responsive design with mobile support
- Add key metrics as cards above the chart
- Use RocketHub brand colors (#FF4500 primary, #FF6B35, #FF8C42, #FFAD5A)
- Make it production-ready with proper styling
- Include proper error handling
- Return ONLY the complete HTML document, no explanations

The HTML should be a complete, standalone document that can be displayed in an iframe.`;

    console.log('üöÄ Making Gemini API call...');

    try {
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 8192,
          }
        })
      });

      console.log('üì° API Response status:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå API Error:', errorText);
        throw new Error(`Gemini API error: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      console.log('‚úÖ API Response received:', {
        hasCandidates: !!data.candidates,
        candidatesLength: data.candidates?.length || 0
      });

      if (!data.candidates || data.candidates.length === 0) {
        throw new Error('No visualization generated by Gemini API');
      }

      const htmlContent = data.candidates[0].content.parts[0].text;
      console.log('üìä Generated HTML length:', htmlContent.length);
      
      return htmlContent;
    } catch (error) {
      console.error('‚ùå Gemini API Error:', error);
      throw error;
    }
  };

  const generateMockVisualization = (content: string): string => {
    const lowerContent = content.toLowerCase();
    const hasRevenue = lowerContent.includes('revenue') || lowerContent.includes('sales') || lowerContent.includes('income');
    const hasGrowth = lowerContent.includes('growth') || lowerContent.includes('increase') || lowerContent.includes('trend');
    const hasComparison = lowerContent.includes('vs') || lowerContent.includes('compare') || lowerContent.includes('versus');
    const hasTime = lowerContent.includes('year') || lowerContent.includes('month') || lowerContent.includes('quarter');
    
    let chartType = 'bar';
    let chartData = '';
    let title = 'Data Analysis';
    let metrics = '';
    
    if (hasRevenue && hasTime) {
      chartType = 'line';
      title = 'Revenue Growth Analysis';
      chartData = `
        labels: ['Q1 2023', 'Q2 2023', 'Q3 2023', 'Q4 2023', 'Q1 2024'],
        datasets: [{
          label: 'Revenue ($M)',
          data: [12, 19, 25, 32, 45],
          borderColor: '#FF4500',
          backgroundColor: 'rgba(255, 69, 0, 0.1)',
          borderWidth: 3,
          fill: true
        }]`;
      metrics = `
        <div class="metric">
          <h3>Total Revenue</h3>
          <p>$133M</p>
        </div>
        <div class="metric">
          <h3>Growth Rate</h3>
          <p>275%</p>
        </div>
        <div class="metric">
          <h3>Avg. Quarterly</h3>
          <p>$26.6M</p>
        </div>`;
    } else if (hasComparison) {
      chartType = 'bar';
      title = 'Comparative Analysis';
      chartData = `
        labels: ['Product A', 'Product B', 'Product C', 'Product D'],
        datasets: [{
          label: 'Performance Score',
          data: [85, 92, 78, 96],
          backgroundColor: ['#FF4500', '#FF6B35', '#FF8C42', '#FFAD5A'],
          borderColor: '#FF4500',
          borderWidth: 2
        }]`;
      metrics = `
        <div class="metric">
          <h3>Best Performer</h3>
          <p>Product D</p>
        </div>
        <div class="metric">
          <h3>Average Score</h3>
          <p>87.8</p>
        </div>
        <div class="metric">
          <h3>Improvement</h3>
          <p>+12%</p>
        </div>`;
    } else if (hasGrowth) {
      chartType = 'line';
      title = 'Growth Trend Analysis';
      chartData = `
        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
        datasets: [{
          label: 'Growth %',
          data: [5, 12, 18, 25, 32, 45],
          borderColor: '#FF4500',
          backgroundColor: 'rgba(255, 69, 0, 0.2)',
          borderWidth: 3,
          fill: true
        }]`;
      metrics = `
        <div class="metric">
          <h3>Peak Growth</h3>
          <p>45%</p>
        </div>
        <div class="metric">
          <h3>Avg Growth</h3>
          <p>22.8%</p>
        </div>
        <div class="metric">
          <h3>Trend</h3>
          <p>Upward</p>
        </div>`;
    } else {
      chartType = 'doughnut';
      title = 'Data Overview';
      chartData = `
        labels: ['Category A', 'Category B', 'Category C', 'Category D'],
        datasets: [{
          data: [35, 25, 20, 20],
          backgroundColor: ['#FF4500', '#FF6B35', '#FF8C42', '#FFAD5A'],
          borderWidth: 2
        }]`;
      metrics = `
        <div class="metric">
          <h3>Total Items</h3>
          <p>100</p>
        </div>
        <div class="metric">
          <h3>Categories</h3>
          <p>4</p>
        </div>
        <div class="metric">
          <h3>Top Category</h3>
          <p>Category A</p>
        </div>`;
    }

    const htmlContent = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            margin: 20px; 
            background: #f5f5f5; 
        }
        .container { 
            max-width: 1200px; 
            margin: 0 auto; 
            background: white; 
            padding: 20px; 
            border-radius: 8px; 
            box-shadow: 0 2px 10px rgba(0,0,0,0.1); 
        }
        .chart-container {
            position: relative;
            height: 400px;
            margin: 20px 0;
        }
        h1 { color: #333; text-align: center; }
        .metric { 
            display: inline-block; 
            margin: 10px; 
            padding: 15px; 
            background: #FF4500; 
            color: white; 
            border-radius: 8px; 
            text-align: center;
        }
        .metric h3 { margin: 0 0 5px 0; font-size: 14px; }
        .metric p { margin: 0; font-size: 18px; font-weight: bold; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üìä ${title}</h1>
        <div class="metrics">
            ${metrics}
        </div>
        <div class="chart-container">
            <canvas id="chart"></canvas>
        </div>
    </div>
    <script>
        const ctx = document.getElementById('chart').getContext('2d');
        new Chart(ctx, {
            type: '${chartType}',
            data: {
                ${chartData}
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: '${title}'
                    }
                }
            }
        });
    </script>
</body>
</html>`;
      
      console.log('Generated HTML length:', htmlContent.length);
      return htmlContent;
  };

  const generateVisualization = async (content: string): Promise<string> => {
    console.log('üîÑ Starting visualization generation...');
    
    try {
      console.log('üöÄ Attempting Gemini API generation...');
      const geminiHtml = await generateVisualizationWithGemini(content);
      console.log('‚úÖ Gemini API generation successful');
      return geminiHtml;
    } catch (error) {
      console.log('‚ö†Ô∏è Gemini API failed, falling back to mock:', error);
      return generateMockVisualization(content);
    }
  };

  useEffect(() => {
    const loadVisualization = async () => {
      console.log('üîÑ Starting visualization load...');
      
      if (!messageContent) {
        console.log('‚ùå No message content provided');
        setError('No message content provided');
        setIsLoading(false);
        return;
      }

      if (cachedVisualization) {
        console.log('‚úÖ Using cached visualization');
        setVisualizationHtml(cachedVisualization);
        setIsLoading(false);
        return;
      }

      try {
        console.log('üîÑ Setting loading to true');
        setIsLoading(true);
        setError(null);
        
        console.log('üöÄ Generating visualization...');
        const html = await generateVisualization(messageContent);
        console.log('‚úÖ Visualization generated, setting HTML...');
        setVisualizationHtml(html);
        
        if (cacheVisualization && messageId) {
          console.log('üíæ Caching visualization...');
          cacheVisualization(messageId, html);
        }
        
        console.log('‚úÖ Visualization set successfully, clearing loading state');
      } catch (err) {
        console.error('‚ùå Visualization generation error:', err);
        setError(err instanceof Error ? err.message : 'Failed to generate visualization');
      } finally {
        console.log('üîÑ Setting loading to false');
        setIsLoading(false);
      }
    };

    loadVisualization();
  }, [messageContent, visualizationType, cachedVisualization, messageId, cacheVisualization]);

  const handleGoBack = () => {
    navigate('/');
  };

  const handleRetry = () => {
    setError(null);
    setVisualizationHtml('');
    setIsLoading(true);
    
    setTimeout(async () => {
      try {
        const html = await generateVisualization(messageContent);
        setVisualizationHtml(html);
        
        if (cacheVisualization && messageId) {
          cacheVisualization(messageId, html);
        }
      } catch (err) {
        console.error('Retry error:', err);
        setError(err instanceof Error ? err.message : 'Failed to generate visualization');
      } finally {
        setIsLoading(false);
      }
    }, 500);
  };

  if (!messageContent) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-[#1a1a2e] to-[#16213e] flex items-center justify-center">
        <div className="text-center text-white">
          <AlertCircle className="w-16 h-16 text-red-400 mx-auto mb-4" />
          <p className="text-lg mb-4">No visualization data available</p>
          <button
            onClick={handleGoBack}
            className="bg-[#FF4500] hover:bg-[#FF6B35] text-white px-6 py-3 rounded-lg transition-colors"
          >
            Go Back
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-[#1a1a2e] to-[#16213e] flex flex-col">
      <header className="bg-gradient-to-r from-[#1a1a2e] to-[#16213e] border-b border-gray-700 px-3 sm:px-6 py-3 sm:py-4 sticky top-0 z-50">
        <div className="flex items-center space-x-2 sm:space-x-3">
          <button
            onClick={handleGoBack}
            className="w-8 h-8 sm:w-10 sm:h-10 bg-gray-700 hover:bg-gray-600 rounded-full flex items-center justify-center transition-colors"
          >
            <ArrowLeft className="w-4 h-4 sm:w-5 sm:h-5 text-white" />
          </button>
          <div className="flex items-center space-x-2">
            <BarChart3 className="w-5 h-5 sm:w-6 sm:h-6 text-[#FF4500]" />
            <h1 className="text-lg sm:text-xl font-bold text-white">Data Visualization</h1>
          </div>
        </div>
      </header>

      <div className="flex-1 p-3 sm:p-6">
        <div className="max-w-6xl mx-auto">
          {isLoading ? (
            <div className="flex flex-col items-center justify-center py-12 sm:py-20">
              <Loader2 className="w-10 h-10 sm:w-12 sm:h-12 text-[#FF4500] animate-spin mb-4" />
              <h2 className="text-xl sm:text-2xl font-bold text-white mb-2">Generating Visualization</h2>
              <p className="text-gray-400 text-center max-w-md text-sm sm:text-base">
                Using AI to analyze your data and create interactive charts...
              </p>
            </div>
          ) : error ? (
            <div className="text-center py-12 sm:py-20">
              <div className="w-12 h-12 sm:w-16 sm:h-16 bg-red-500/20 rounded-full flex items-center justify-center mx-auto mb-4">
                <AlertCircle className="w-6 h-6 sm:w-8 sm:h-8 text-red-400" />
              </div>
              <h2 className="text-xl sm:text-2xl font-bold text-white mb-2">Visualization Error</h2>
              <p className="text-gray-400 mb-6 max-w-md mx-auto text-sm sm:text-base">{error}</p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <button
                  onClick={handleRetry}
                  className="flex items-center justify-center space-x-2 bg-[#FF4500] hover:bg-[#FF6B35] text-white px-4 sm:px-6 py-2 sm:py-3 rounded-lg transition-colors text-sm sm:text-base"
                >
                  <RotateCcw className="w-4 h-4" />
                  <span>Retry</span>
                </button>
                <button
                  onClick={handleGoBack}
                  className="bg-gray-700 hover:bg-gray-600 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-lg transition-colors text-sm sm:text-base"
                >
                  Go Back to Chat
                </button>
              </div>
            </div>
          ) : visualizationHtml ? (
            <div className="space-y-4 sm:space-y-6">
              <div className="bg-white rounded-lg shadow-lg overflow-hidden">
                <iframe
                  srcDoc={visualizationHtml}
                  className="w-full h-[400px] sm:h-[600px] border-0"
                  title="Data Visualization"
                  sandbox="allow-scripts allow-same-origin"
                />
              </div>

              <div className="flex flex-col sm:flex-row gap-3 sm:gap-4">
                <button
                  onClick={handleGoBack}
                  className="flex-1 bg-gray-700 hover:bg-gray-600 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-lg transition-colors font-medium text-sm sm:text-base"
                >
                  Back to Chat
                </button>
                <button
                  onClick={() => {
                    const blob = new Blob([visualizationHtml], { type: 'text/html' });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'astra-visualization.html';
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);
                  }}
                  className="flex-1 bg-[#FF4500] hover:bg-[#FF6B35] text-white px-4 sm:px-6 py-2 sm:py-3 rounded-lg transition-colors font-medium text-sm sm:text-base"
                >
                  Download Visualization
                </button>
              </div>
            </div>
          ) : null}
        </div>
      </div>
    </div>
  );
};

export default VisualizationPage;